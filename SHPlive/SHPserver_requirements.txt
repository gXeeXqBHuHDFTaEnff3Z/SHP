=== Mission ===
SHPserver.py is a python script used to receive covert network channel messages via the SHP protocol familiy.

=== Parameters ===
The server needs to be configurable via the following command line parameters. In [] the parameter range is given.

These parameters configure the SHP algorithm:
• bitlength (number of message and source bits to compare) [1..n]
• rounding factor (number of decimal places for rounding timestamps) [0..6]
• poi (PDU of interest) [all, broadcast_domain]
• inputsource (source of input data) [IPD, ISD, ICD, ISPN, timestamp]
• subchanneling (dividing the cc into subchannels to avoid near-zero IPD) [none, baseipd, iphash, clockhash]
• subchanneling bits (number of bits for subchannel selection) [0 if multiplexing==none; else 1..64]
• ecc (error correction code) [none, hamming, hamming+, inline-hamming+]
• multihashing (repeated hashing to increase hit probability per PDU) [0..64; may never be more than bitlength/2]

Additionally, these parameters are used to configure the server:
• verbose (output detailed debugging information in log) [TRUE, FALSE]
• output folder (directory where received secret message and other results are saved)
• secret_signal (network signal used for initiating and synchronizing connections) [ARP_request, ICMP_echo_request]

=== Algorithm ===
1. Observe network traffic using scapy library and call handle_packet for each pdu observed
2. handle_packet: if the first secret signal is received (e.g. an ARP request for 10.1.2.3) note its timestamp as the connection start time and the source ip adress as an active SHPclient. From this point on repeat the following steps for every active SHPclient until a secret stop sign (e.g. an ARP request for 10.1.2.4) for the last active SHPclient is received:
a) display a table of active SHPclient connections on the CLI (ip adress, start time, number of secret signals received, number of message bits received)
b) Observe network traffic and note timestamps and number of PDUs received. The number of PDUs is counted per SHPclient connection. 
c) Whenever a secret signal from a SHPclient is received, note its time as this clients last_signal_time and use the network PDU received just before the signal as input packet for the SHP function
d) Whenever the SHPfunction is called it calculates the message bits received by hashing the timing information of the pdu and then adds the message symbols to a message_*.txt file. The * is the ip adress of the SHPclient the message was received from.
e) in verbose mode, the SHPclient ip, PDU timestamp and packet number are also recorded in a file called receptions.csv
f) Whenever a client connection is closed by receiving a stop signal, note the client ip, start time, end time, number of bits received per connection, average bandwidth in bits/s in a file called connections.csv
3. if all SHPclient connectins have been closed, start from 1.
4. the script can be stopped at any time by user input. if this happens, record all connections so far in the connections.csv with a comment of "aborted by user".

=== Performance ===
• for measuring performance the script needs to record its total runtime, number of pdus processed and number of gbit processed as well as the SHP cache hitrate
• The script should support multiple processors for parallel client connections.
• frequently called deterministic methods such as SHP should be LRU-cached to improve performance and decrease CPU load per execution

=== Fault Tolerance ===
• the script must handle exceptions gracefully. 
• if an exception is uncaught by specific handling, a traceback including timestamp and the scripts parameterization must be written to a rotating log file
• the script needs to support graceful degradation if a PDU is not formed as expected
	• if SHP can not be calculated for the pdu, the pdu needs to be skipped
	• if a subchannel can not be calculated for the PDU, it is assumed to be subchannel 0

